% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ELR.R
\name{ELR}
\alias{ELM}
\alias{ELM.default}
\alias{ELM.formula}
\alias{ELMgridsearch}
\alias{ELMgridsearch.default}
\alias{ELMgridsearch.formula}
\alias{ELR}
\alias{ELR.default}
\alias{ELR.formula}
\alias{ELRgridsearch}
\alias{ELRgridsearch.default}
\alias{ELRgridsearch.formula}
\title{ELR}
\usage{
ELR(X, ...)

\method{ELR}{default}(X, Y, para, model = c("LS-ELR", "IRLS-ELR")[1],
  fit = FALSE, ...)

\method{ELR}{formula}(form, dat, para, model = c("LS-ELR", "IRLS-ELR")[1],
  fit = FALSE, ...)

ELRgridsearch(X, ...)

\method{ELRgridsearch}{default}(X, Y, para, model = c("LS-ELR",
  "IRLS-ELR")[1], ...)

\method{ELRgridsearch}{formula}(form, dat, para, model = c("LS-ELR",
  "IRLS-ELR")[1], ...)

ELM(X, ...)

\method{ELM}{default}(X, Y, para, fit = FALSE, ...)

\method{ELM}{formula}(form, dat, para, fit = FALSE, ...)

ELMgridsearch(X, ...)

\method{ELMgridsearch}{default}(X, Y, para, ...)

\method{ELMgridsearch}{formula}(form, dat, para, ...)
}
\arguments{
\item{X}{A matrix of predictors}

\item{Y}{True class; a factor or binary 0,1 numeric vector}

\item{para}{A named parameter list with required  entries:}

\item{model}{Type of model to train: "LS-ELR" or "IRLS-ELR". Default
to "LS-ELR".}

\item{fit}{(Logical) make predictions on training set?
\itemize{
\item{p: }{Dimension of random feature space }
\item{gamma: }{Numeric regularization parameter }
\item{ken: }{Type of kernel function}
\item{max.iter: }{Maximum number of iterations for IRLS-ELR}
\item{tol: }{Convergence tolerance for IRLS-ELR}
\item{grid: }{Optional dataframe with possible combinations of p and gamma
 to perform grid search}
}}

\item{form}{A formula}

\item{dat}{Matrix/data frame}

\item{\dots}{Further arguments passed to or from other methods.}
}
\value{
An object of class \code{ELR}; a list with items
\item{beta}{estimated parameters}
\item{p}{Dimension of random feature space}
\item{W}{Random weight matrix}
\item{ken}{kernel function}
\item{pred}{A list with fitted class memberships and class probabilities
on the training set}
\item{para}{A named parameter list}
\item{prior}{prevalence rate of the positive class in the training set}
}
\description{
Train and fit LS-ELR and IRLS-ELR  on the training set. Also performs grid search for parameter
selection.
}
\examples{
\dontrun{
set.seed(12345)
dat <- SynData()
ix = sample(nrow(dat), floor(nrow(dat)*0.75))
dat.trn = dat[ix, ]
dat.tst = dat[-ix, ]
form <- as.formula(paste("key ~ ", paste(names(dat)[!names(dat)\%in\%"key"], collapse = "+")))
para <- list( ken = "sigmoid", p = 100, gamma = 10.01)
mod <- ELR(form, dat.trn, para, model="LS-ELR")
prob <- predict(mod, dat.tst)
perf <- Performance(prob[,2], dat.tst$key)

para <- list( ken = "sigmoid", p = 100, gamma = 10.01, tol = 1e-6, max.iter = 100)
mod2 <- ELR(form, dat.trn, para, model="IRLS-ELR")
prob2 <- predict(mod2, dat.tst)
perf2 <- Performance(prob2[,2], dat.tst$key)
}
\dontrun{
set.seed(12345)
dat <- SynData()
ix = sample(nrow(dat), floor(nrow(dat)*0.75))
dat.trn = dat[ix, ]
dat.tst = dat[-ix, ]
form <- as.formula(paste("key ~ ", paste(names(dat)[!names(dat)\%in\%"key"], collapse = "+")))
para <- list( ken = "sigmoid", grid = expand.grid(p = c(50, 100), gamma = c(0.05,10.01)))
mod <- ELRgridsearch(form, dat.trn, para, model="LS-ELR")
pred <- predict(mod, dat.tst)
perf <- Performance(pred$prob[,2], dat.tst$key)

para <- list( ken = "sigmoid", p = 100, gamma = 10.01, tol = 1e-6, max.iter = 100)
mod2 <- ELR(form, dat.trn, para, model="IRLS-ELR")
pred2 <- predict(mod2, dat.tst)
perf2 <- Performance(pred2$prob[,2], dat.tst$key)
}
}

